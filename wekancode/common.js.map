{"version":3,"sources":["webpack:///./src/app/services/authentication.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAA2C;AACO;AACC;AACd;AAOrC;IAOE,+BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAClC,IAAI,CAAC,kBAAkB,GAAG,IAAI,oDAAe,CAAO,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACvG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;IAC5D,CAAC;IAED,sBAAW,mDAAgB;aAA3B;YACE,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QACvC,CAAC;;;OAAA;IAED,qCAAK,GAAL,UAAM,KAAa,EAAE,QAAgB;QAArC,iBAcC;QAbC,IAAI,IAAI,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;QAChD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,4CAA4C,EAAE,IAAI,CAAC;aAC3E,IAAI,CAAC,0DAAG,CAAC,aAAG;YACX,0DAA0D;YAC1D,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,IAAI,KAAI,CAAC,IAAI,IAAI,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACvC,oGAAoG;gBACpG,cAAc,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjE,cAAc,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;gBAC7C,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;aACzC;YACD,OAAO,KAAI,CAAC,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,sCAAM,GAAN;QACE,iDAAiD;QACjD,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACzC,cAAc,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACxC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IArCU,qBAAqB;QAJjC,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAS0B,+DAAU;OAPzB,qBAAqB,CAuCjC;IAAD,4BAAC;CAAA;AAvCiC","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from '../model/model';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthenticationService {\n\n  public user: User;\n\n  private currentUserSubject: BehaviorSubject<User>;\n  public currentUser: Observable<User>;\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(sessionStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User {\n    return this.currentUserSubject.value;\n  }\n\n  login(email: string, password: string) {\n    let data = { email: email, password: password };\n    return this.http.post<any>('http://dev.api.staller.show/v1/users/login', data)\n      .pipe(map(res => {\n        // login successful if there's a jwt token in the response\n        this.user = res['data'];\n        if (this.user && this.user.access_token) {\n          // store user details and jwt token in session storage to keep user logged in between page refreshes\n          sessionStorage.setItem('currentUser', JSON.stringify(this.user));\n          sessionStorage.setItem('isLoggedin', 'true');\n          this.currentUserSubject.next(this.user);\n        }\n        return this.user;\n      }));\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    sessionStorage.removeItem('currentUser');\n    sessionStorage.removeItem('isLoggedin');\n    this.currentUserSubject.next(null);\n  }\n\n}\n"],"sourceRoot":""}